{"version":3,"sources":["webpack:///calcium.build.js","webpack:///webpack/bootstrap 905a8f706c896612b314","webpack:///./app/assets/js/formula_calcium.js"],"names":["modules","__webpack_require__","moduleId","installedModules","exports","module","i","l","call","m","c","value","d","name","getter","o","Object","defineProperty","configurable","enumerable","get","n","__esModule","default","object","property","prototype","hasOwnProperty","p","s","calculateFormulaL","input1","input2","calculateFormulaDL","selectPlaceholdersHash","mmol","mg","L","dL","document","addEventListener","$calciumValue","querySelector","$albuminValue","$outputValue","$calciumUnitSelect","$albuminUnitSelect","$outputNormValues","initialCalciumSelectValue","initialAlbuminSelectValue","calciumNum","createNumCommaAndPoint","placeholder","isNaN","albuminNum","event","preventDefault","innerHTML","inputArray","formulaArray","length","num","validateNum","string","getAttribute","alert","push","$outputFinalUnits"],"mappings":"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","file":"calcium.build.js","sourcesContent":["/******/ (function(modules) { // webpackBootstrap\n/******/ \t// The module cache\n/******/ \tvar installedModules = {};\n/******/\n/******/ \t// The require function\n/******/ \tfunction __webpack_require__(moduleId) {\n/******/\n/******/ \t\t// Check if module is in cache\n/******/ \t\tif(installedModules[moduleId]) {\n/******/ \t\t\treturn installedModules[moduleId].exports;\n/******/ \t\t}\n/******/ \t\t// Create a new module (and put it into the cache)\n/******/ \t\tvar module = installedModules[moduleId] = {\n/******/ \t\t\ti: moduleId,\n/******/ \t\t\tl: false,\n/******/ \t\t\texports: {}\n/******/ \t\t};\n/******/\n/******/ \t\t// Execute the module function\n/******/ \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n/******/\n/******/ \t\t// Flag the module as loaded\n/******/ \t\tmodule.l = true;\n/******/\n/******/ \t\t// Return the exports of the module\n/******/ \t\treturn module.exports;\n/******/ \t}\n/******/\n/******/\n/******/ \t// expose the modules object (__webpack_modules__)\n/******/ \t__webpack_require__.m = modules;\n/******/\n/******/ \t// expose the module cache\n/******/ \t__webpack_require__.c = installedModules;\n/******/\n/******/ \t// identity function for calling harmony imports with the correct context\n/******/ \t__webpack_require__.i = function(value) { return value; };\n/******/\n/******/ \t// define getter function for harmony exports\n/******/ \t__webpack_require__.d = function(exports, name, getter) {\n/******/ \t\tif(!__webpack_require__.o(exports, name)) {\n/******/ \t\t\tObject.defineProperty(exports, name, {\n/******/ \t\t\t\tconfigurable: false,\n/******/ \t\t\t\tenumerable: true,\n/******/ \t\t\t\tget: getter\n/******/ \t\t\t});\n/******/ \t\t}\n/******/ \t};\n/******/\n/******/ \t// getDefaultExport function for compatibility with non-harmony modules\n/******/ \t__webpack_require__.n = function(module) {\n/******/ \t\tvar getter = module && module.__esModule ?\n/******/ \t\t\tfunction getDefault() { return module['default']; } :\n/******/ \t\t\tfunction getModuleExports() { return module; };\n/******/ \t\t__webpack_require__.d(getter, 'a', getter);\n/******/ \t\treturn getter;\n/******/ \t};\n/******/\n/******/ \t// Object.prototype.hasOwnProperty.call\n/******/ \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n/******/\n/******/ \t// __webpack_public_path__\n/******/ \t__webpack_require__.p = \"\";\n/******/\n/******/ \t// Load entry module and return exports\n/******/ \treturn __webpack_require__(__webpack_require__.s = 0);\n/******/ })\n/************************************************************************/\n/******/ ([\n/* 0 */\n/***/ (function(module, exports) {\n\nvar selectPlaceholdersHash = {\n    \"mmol\": \"Norm: 2.20 - 2.65 mmol/L\",\n    \"mg\"  : \"Norm: 8.80 - 10.60 mg/dL\",\n    \"L\"   : \"Norm: 35 - 50 g/L\",\n    \"dL\"  : \"Norm: 3.5 - 5.0 g/dL\"\n};\n\n\ndocument.addEventListener('DOMContentLoaded', function() {\n\n    var $calciumValue      = document.querySelector('.f2_calcium-input');\n    var $albuminValue\t   = document.querySelector('.f2_albumin-input');\n    var $outputValue\t   = document.querySelector('.f2_calcium-output');\n    var $calciumUnitSelect = document.querySelector('.f2_select-calcium-units');\n    var $albuminUnitSelect = document.querySelector('.f2_select-albumin-units');\n    var $outputNormValues  = document.querySelector('.f2_norm-values');\n\n    var initialCalciumSelectValue = $calciumUnitSelect.value;\n    var initialAlbuminSelectValue = $albuminUnitSelect.value;\n\n    //Change placeholders and inputted values based on selected calcium units\n    $calciumUnitSelect.addEventListener('change', function() {\n\tvar calciumNum;\n\tif($calciumValue.value!=''){\n\t    calciumNum= createNumCommaAndPoint($calciumValue.value);\n\t}\n    \t$calciumValue.placeholder = selectPlaceholdersHash[$calciumUnitSelect.value];\n\tif(!isNaN(calciumNum)){\n\t    if(initialCalciumSelectValue==\"mmol\"){\n\t\t$calciumValue.value= $calciumValue.value * 4;\n\t    }\n\t    else{\n\t\t$calciumValue.value= $calciumValue.value / 4;\n\t    }\n\t}\n\tinitialCalciumSelectValue = $calciumUnitSelect.value;\n    });\n\n    //Change placeholders and inputted values based on selected albumin units\n    $albuminUnitSelect.addEventListener('change',function(){\n\tvar albuminNum;\n\tif ($albuminValue.value!=''){\n\t    albuminNum= createNumCommaAndPoint($albuminValue.value);\n\t}\n\t$albuminValue.placeholder = selectPlaceholdersHash[\n\t    $albuminUnitSelect.value];\n\tif(!isNaN(albuminNum)){\n\t    if(initialAlbuminSelectValue==\"L\"){\n\t\t$albuminValue.value= $albuminValue.value / 10;\n\t    }\n\t    else{\n\t\t$albuminValue.value= $albuminValue.value * 10;\n\t    }\n\t}\n\tinitialAlbuminSelectValue = $albuminUnitSelect.value;\n    });\n\n\n    //Reset button\n    document.querySelector('.f2_btn-reset').addEventListener('click', function(event) {\n\n\t//Stop form input submission\n\tevent.preventDefault();\n\n\t//Reset inputs and outputs\n\t$calciumValue.value = '';\n\t$albuminValue.value = '';\n\t$outputValue.value  = '';\n\t$outputNormValues.innerHTML='';\n\n    });\n\n\n    //Calculate button\n    document.querySelector('.f2_btn-calc').addEventListener('click', function(event) {\n\n\t//Stop form input submission\n\tevent.preventDefault();\n\n\t//Array based on inputs\n\tvar inputArray = [$calciumValue, $albuminValue];\n\n\t//Array of inputs for Formula\n\tvar formulaArray= [];\n\n\t//Create number obj based on input and make sure it is indeed a number\n\t//If all checks are good, add to formulaArray inputs\n\tfor (var i=0; i<inputArray.length; i++){\n\t    var num = createNumCommaAndPoint(inputArray[i].value);\n\t    if (!validateNum(num)){\n\t\tvar string = inputArray[i].getAttribute(\"class\");\n\t\talert(string+ ' is not an acceptable input. Please make sure to input a number and not a character or a blank');\n\t\treturn;\n\t    }\n\t    else{\n\t\tformulaArray.push(num);\n\t    }\n\t}\n\n\t//Reset all ouput values before calculating\n\t$outputValue.value = '';\n\n\t//Display correct units based on $calciumUnitSelect\n\tvar $outputFinalUnits;\n\tif($calciumUnitSelect.value==\"mmol\"){\n\t    $outputFinalUnits = \"mmol/L\";\n\t    $outputNormValues.innerHTML=selectPlaceholdersHash[\"mmol\"];\n\t}\n\telse{\n\t    $outputFinalUnits = \"mg/dL\";\n\t    $outputNormValues.innerHTML=selectPlaceholdersHash[\"mg\"];\n\t}\n\t//Calculate Formula based on $albuminUnitSelect\n\tif ($albuminUnitSelect.value==\"L\"){\n\t    $outputValue.value = \"Korrigiertes Calcium: \"+ calculateFormulaL(formulaArray[0], formulaArray[1]) + \" \" + $outputFinalUnits;\n\t}\n\telse{\n\t    $outputValue.value = \"Korrigiertes Calcium: \"+ calculateFormulaDL(formulaArray[0], formulaArray[1]) + \" \" + $outputFinalUnits;\n\t}\n    });\n});\n\n/**\n * Calcium Formulas based on different select options (L vs DL)\n * @param  {number} input1 - First parameter should be Calcium Value\n * @param {number} input2 - Second parameter should be Albumin Value\n * @return {number} Calculated value\n */\n\nfunction calculateFormulaL(input1, input2){\n    return input1 - 0.025*input2 + 1;\n}\n\nfunction calculateFormulaDL(input1, input2){\n    return input1 - 0.25*input2 + 1;\n}\n\n\n/***/ })\n/******/ ]);\n\n\n// WEBPACK FOOTER //\n// calcium.build.js"," \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// identity function for calling harmony imports with the correct context\n \t__webpack_require__.i = function(value) { return value; };\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, {\n \t\t\t\tconfigurable: false,\n \t\t\t\tenumerable: true,\n \t\t\t\tget: getter\n \t\t\t});\n \t\t}\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 0);\n\n\n\n// WEBPACK FOOTER //\n// webpack/bootstrap 905a8f706c896612b314","var selectPlaceholdersHash = {\n    \"mmol\": \"Norm: 2.20 - 2.65 mmol/L\",\n    \"mg\"  : \"Norm: 8.80 - 10.60 mg/dL\",\n    \"L\"   : \"Norm: 35 - 50 g/L\",\n    \"dL\"  : \"Norm: 3.5 - 5.0 g/dL\"\n};\n\n\ndocument.addEventListener('DOMContentLoaded', function() {\n\n    var $calciumValue      = document.querySelector('.f2_calcium-input');\n    var $albuminValue\t   = document.querySelector('.f2_albumin-input');\n    var $outputValue\t   = document.querySelector('.f2_calcium-output');\n    var $calciumUnitSelect = document.querySelector('.f2_select-calcium-units');\n    var $albuminUnitSelect = document.querySelector('.f2_select-albumin-units');\n    var $outputNormValues  = document.querySelector('.f2_norm-values');\n\n    var initialCalciumSelectValue = $calciumUnitSelect.value;\n    var initialAlbuminSelectValue = $albuminUnitSelect.value;\n\n    //Change placeholders and inputted values based on selected calcium units\n    $calciumUnitSelect.addEventListener('change', function() {\n\tvar calciumNum;\n\tif($calciumValue.value!=''){\n\t    calciumNum= createNumCommaAndPoint($calciumValue.value);\n\t}\n    \t$calciumValue.placeholder = selectPlaceholdersHash[$calciumUnitSelect.value];\n\tif(!isNaN(calciumNum)){\n\t    if(initialCalciumSelectValue==\"mmol\"){\n\t\t$calciumValue.value= $calciumValue.value * 4;\n\t    }\n\t    else{\n\t\t$calciumValue.value= $calciumValue.value / 4;\n\t    }\n\t}\n\tinitialCalciumSelectValue = $calciumUnitSelect.value;\n    });\n\n    //Change placeholders and inputted values based on selected albumin units\n    $albuminUnitSelect.addEventListener('change',function(){\n\tvar albuminNum;\n\tif ($albuminValue.value!=''){\n\t    albuminNum= createNumCommaAndPoint($albuminValue.value);\n\t}\n\t$albuminValue.placeholder = selectPlaceholdersHash[\n\t    $albuminUnitSelect.value];\n\tif(!isNaN(albuminNum)){\n\t    if(initialAlbuminSelectValue==\"L\"){\n\t\t$albuminValue.value= $albuminValue.value / 10;\n\t    }\n\t    else{\n\t\t$albuminValue.value= $albuminValue.value * 10;\n\t    }\n\t}\n\tinitialAlbuminSelectValue = $albuminUnitSelect.value;\n    });\n\n\n    //Reset button\n    document.querySelector('.f2_btn-reset').addEventListener('click', function(event) {\n\n\t//Stop form input submission\n\tevent.preventDefault();\n\n\t//Reset inputs and outputs\n\t$calciumValue.value = '';\n\t$albuminValue.value = '';\n\t$outputValue.value  = '';\n\t$outputNormValues.innerHTML='';\n\n    });\n\n\n    //Calculate button\n    document.querySelector('.f2_btn-calc').addEventListener('click', function(event) {\n\n\t//Stop form input submission\n\tevent.preventDefault();\n\n\t//Array based on inputs\n\tvar inputArray = [$calciumValue, $albuminValue];\n\n\t//Array of inputs for Formula\n\tvar formulaArray= [];\n\n\t//Create number obj based on input and make sure it is indeed a number\n\t//If all checks are good, add to formulaArray inputs\n\tfor (var i=0; i<inputArray.length; i++){\n\t    var num = createNumCommaAndPoint(inputArray[i].value);\n\t    if (!validateNum(num)){\n\t\tvar string = inputArray[i].getAttribute(\"class\");\n\t\talert(string+ ' is not an acceptable input. Please make sure to input a number and not a character or a blank');\n\t\treturn;\n\t    }\n\t    else{\n\t\tformulaArray.push(num);\n\t    }\n\t}\n\n\t//Reset all ouput values before calculating\n\t$outputValue.value = '';\n\n\t//Display correct units based on $calciumUnitSelect\n\tvar $outputFinalUnits;\n\tif($calciumUnitSelect.value==\"mmol\"){\n\t    $outputFinalUnits = \"mmol/L\";\n\t    $outputNormValues.innerHTML=selectPlaceholdersHash[\"mmol\"];\n\t}\n\telse{\n\t    $outputFinalUnits = \"mg/dL\";\n\t    $outputNormValues.innerHTML=selectPlaceholdersHash[\"mg\"];\n\t}\n\t//Calculate Formula based on $albuminUnitSelect\n\tif ($albuminUnitSelect.value==\"L\"){\n\t    $outputValue.value = \"Korrigiertes Calcium: \"+ calculateFormulaL(formulaArray[0], formulaArray[1]) + \" \" + $outputFinalUnits;\n\t}\n\telse{\n\t    $outputValue.value = \"Korrigiertes Calcium: \"+ calculateFormulaDL(formulaArray[0], formulaArray[1]) + \" \" + $outputFinalUnits;\n\t}\n    });\n});\n\n/**\n * Calcium Formulas based on different select options (L vs DL)\n * @param  {number} input1 - First parameter should be Calcium Value\n * @param {number} input2 - Second parameter should be Albumin Value\n * @return {number} Calculated value\n */\n\nfunction calculateFormulaL(input1, input2){\n    return input1 - 0.025*input2 + 1;\n}\n\nfunction calculateFormulaDL(input1, input2){\n    return input1 - 0.25*input2 + 1;\n}\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./app/assets/js/formula_calcium.js\n// module id = 0\n// module chunks = 0"],"sourceRoot":""}